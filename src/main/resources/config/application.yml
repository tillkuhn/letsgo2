# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: DEBUG
    io.github.jhipster: DEBUG
    net.timafe.letsgo2: DEBUG
    ## X509Certificate: Alg:SHA256withRSA, (when interacting with cognito)
    jdk.event.security: INFO
    ## Your profile name includes a 'profile ' prefix.  blabla
    com.amazonaws.auth.profile.internal.BasicProfileConfigLoader: ERROR
    com.amazonaws.auth.AWS4Signer: INFO
    com.amazonaws.requestId: INFO

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: ['configprops', 'env', 'health', 'info', 'jhimetrics', 'logfile', 'loggers', 'prometheus', 'threaddump']
  endpoint:
    health:
      show-details: when-authorized
      roles: 'ROLE_ADMIN'
    jhimetrics:
      enabled: true
  info:
    git:
      mode: full
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  metrics:
    export:
      # Prometheus is the default metrics backend
      prometheus:
        enabled: true
        step: 60
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
    web:
      server:
        auto-time-requests: true

spring:
  application:
    name: letsgo2
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by gradle when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: #spring.profiles.active#
  jmx:
    enabled: false
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
  # tku  descrease default size as we barely need the db
  datasource:
    hikari:
      minimum-idle: 2
      maximum-pool-size: 4
  jpa:
    open-in-view: false
    properties:
      hibernate.jdbc.time_zone: UTC
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  mvc:
    favicon:
      enabled: false
  task:
    execution:
      thread-name-prefix: letsgo-2-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: letsgo-2-scheduling-
      pool:
        size: 2
  thymeleaf:
    mode: HTML
  output:
    ansi:
      console-available: true
  security:
    ## https://www.baeldung.com/spring-security-oauth-cognito
    ## https://stackoverflow.com/questions/48327369/amazon-cognito-oauth2-with-spring-security
    ## https://docs.spring.io/spring-security/site/docs/current/reference/html/oauth2.html
    oauth2:
      client:
        registration:
          cognito:
            clientId: please-overwrite
            clientSecret: please-overwrite
            scope: openid
            redirectUriTemplate: 'http://localhost:8080/login/oauth2/code/cognito'
            clientName: kotlinbaer
        provider:
          cognito:
            issuerUri: https://cognito-idp.aws-region.amazonaws.com/please-overwrite
            usernameAttribute: cognito:username

  # And with that, we should have Spring and Amazon Cogni
#  security:
#    oauth2:
#      client:
#        provider:
#          oidc:
#            issuer-uri: http://localhost:9080/auth/realms/jhipster
#        registration:
#          oidc:
#            client-id: web_app
#            client-secret: web_app

server:
  servlet:
    session:
      cookie:
        http-only: true

# Properties to be exposed on the /info management endpoint
info:
  # Comma separated list of profiles that will trigger the ribbon to show
  display-ribbon-on-profiles: 'dev'

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'letsgo2App'
  # By default CORS is disabled. Uncomment to enable.
  # cors:
  #     allowed-origins: "*"
  #     allowed-methods: "*"
  #     allowed-headers: "*"
  #     exposed-headers: "Authorization,Link,X-Total-Count"
  #     allow-credentials: true
  #     max-age: 1800
  mail:
    from: letsgo2@localhost
  swagger:
    default-include-pattern: /api/.*
    title: letsgo2 API
    description: letsgo2 API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-url:
    contact-email:
    license:
    license-url:
  security:
    oauth2:
      audience:
        - account
        - api://default
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

application:
  aws:
    dynamodb:
      ## APPLICATION_AWS_DYNAMODB_TABLE_PREFIX
      table-prefix: 'horsti-'
    s3:
      bucket-name: 'bucki-'
