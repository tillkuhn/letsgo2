package net.timafe.letsgo2.domain

import com.amazonaws.services.dynamodbv2.datamodeling.*
import java.io.Serializable
import javax.persistence.*
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size
import net.timafe.letsgo2.config.DYNAMODB_PREFIX

/**
 * A Region.
 *
 *    "Item": {
"code": {
"S": "cr"
},
"name": {
"S": "Costa Rica"
},
"coordinates": {
"L": [
{
"N": "-83.75343"
},
{
"N": "9.74892"
}
]
},
"parentCode": {
"S": "americas"
}
}

https://tuhrig.de/dynamodb-with-kotlin-and-spring-boot/
https://github.com/derjust/spring-data-dynamodb-examples
https://stackoverflow.com/questions/44653837/dynamodb-mapper-mapping-collection-datatypes
 */
/*
@Entity
@Table(name = "region")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)

 */
@DynamoDBTable(tableName = DYNAMODB_PREFIX + "region")
class Region(

    /*
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    var id: Long? = null,

     */

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    var id: String? = null, // also to enable default constructor

    @get: NotNull
    @get: Size(min = 2)
    @Column(name = "code", nullable = false)
    var code: String? = null,

    @get: NotNull
    @Column(name = "name", nullable = false)
    var name: String? = null,

    @Column(name = "parent_code")
    var parentCode: String? = null,

    // @DynamoDBAttribute(attributeName = "hasen")
    @DynamoDBTyped(DynamoDBMapperFieldModel.DynamoDBAttributeType.L)
    var coordinates: List<Double> = listOf(1.2,3.4)

    // @Column(name = "coordinates")
    // @DynamoDBAttribute(attributeName = "coordinates")
    // var coordinates: Array<Number> = arrayOf(1.22, 3.44)
    // @DynamoDBTyped(DynamoDBAttributeType.L)

    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
) : Serializable {
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Region) return false
        if (other.id == null || id == null) return false

        return id == other.id
    }

    override fun hashCode() = 31

    override fun toString() = "Region{" +
        "id=$id" +
        ", code='$code'" +
        ", name='$name'" +
        ", parentCode='$parentCode'" +
        "}"

    companion object {
        private const val serialVersionUID = 1L
    }
}
